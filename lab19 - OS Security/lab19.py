'''
This salt + hash function takes any str password and returns a 18 char hexadecimal hash.
The salt is a generated by a the randint() module which creates a 128 digit number.
The hash utilises multiplication, addition, XOR and random prime numbers.
'''
import random
random_prime=10853082333529

def salt(password):
    '''Creates a random 128 digit number that is appended to the password together with the length of the password'''
    salt=random.randint(10**127,(10**128)-1) #Uses the randint module to generate a 128 digit number.
    salted_password=str(password) + str(salt) #Concatenates the password and its salt
    salted_password = str(salted_password) + str(len(salted_password))  # We append the length of the password to the end of the str
    return salted_password #The result is a long random str

def str_to_num(salted_password):
    '''Converts the input salted password into its ascii values & adds padding if necessary'''
    num_list = []
    while (len(salted_password) % 32 != 0):
        # Add padding to the password to make it a multiple of 32 (could be a multiple of any number).
        salted_password = salted_password + str(0)
    for i in salted_password:
        i=ord(i) #Converts each char to its ascii value
        num_list.append(i) #Appends this value to our number list
    return num_list

def hash19(num_list):
    '''Takes the list of ascii values and returns a fixed length number represented in hex'''
    total = 0
    if len(num_list) % 2 != 0:
        # If the number of elements in our list is not even, we will append '1' to make it even
        num_list.append("1")
    for i in range(0,len(num_list),2):
        # Goes through the list in steps of 2, multiplying adjacent numbers and adding it to the total
        sum = (num_list[i]*num_list[i+1])
        total+= sum
    # The result is multiplied with the rand prime and XORED with the total.
    output = (total*random_prime)^total
    return hex(output) #Returns the hashed value in hexadecimal

def crypt(password):
    #password = input("What do you want to hash?\n ")
    hashed = hash19(str_to_num(salt(password)))
    return(f"Your hash for {password} is {hashed} which is {len(str(hashed))} chars long!")

def test():
    '''Simple test of values of different lengths & similar inputs'''
    test_list = ["1 ","1","shawnhoo","shawnhoo","shawnhos","supercalifragilisticexpialidocious"]
    for i in test_list:
        print(crypt(i))

test()